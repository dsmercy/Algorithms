name: CI/CD

on:
  push:
    branches: [master]

env:
  APPLICATION_NAME: algorithms
  IMAGE: dsmercy/algorithms
  TAG: 1.0.${{ github.run_number }}
  DOCKERFILE_PATH: ""
  NAMESPACE: development

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
      - run: |
          echo "Listing files in the root directory:"
          ls ./
      - run: |
          echo "Building the solution..."
          dotnet build Algorithms.sln --configuration Debug

  test-and-coverage:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
      - run: |
          echo "Restoring NuGet packages..."
          dotnet restore Algorithms.sln
      - run: dotnet add Algorithms.Tests/Algorithms.Tests.csproj package coverlet.collector
      - run: mkdir -p .sonar/scanner && dotnet tool install dotnet-sonarscanner --tool-path .sonar/scanner
      - name: Begin SonarCloud analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .sonar/scanner/dotnet-sonarscanner begin \
            /k:"dsmercy_Algorithms" \
            /o:"dsmercy" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths=Algorithms.Tests/TestResults/**/coverage.opencover.xml
      - run: |
          echo "Running unit tests and collecting coverage..."
          dotnet test Algorithms.Tests/Algorithms.Tests.csproj \
            --configuration Debug \
            --no-restore \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./Algorithms.Tests/TestResults \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - run: dotnet build Algorithms.sln
      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: .sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
      - uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: Algorithms.Tests/TestResults

  push-docker-image:
    runs-on: ubuntu-latest
    needs: test-and-coverage
    steps:
      - uses: actions/checkout@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v2
        with:
          context: ./Algorithms/
          push: true
          tags: ${{ env.IMAGE }}:${{ env.TAG }}

  deploy-secrets:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - run: echo "deploy-secrets code skipped"
      # Uncomment below to enable secrets deployment 
      # - uses: actions/checkout@v2
      # - uses: azure/k8s-set-context@v1
      #   with:
      #     kubeconfig: ${{ secrets.KUBECONFIG }}
      #     namespace: ${{ env.NAMESPACE }}
      # - run: |
      #     kubectl --namespace ${{ env.NAMESPACE }} create secret generic ${{ env.APPLICATION_NAME }}-secrets \
      #       --from-literal=my_connection_string=${{ secrets.MY_CONNECTION_STRING }} \
      #       --dry-run=client -o yaml | kubectl apply -f -

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [test-and-coverage, push-docker-image, deploy-secrets]
    steps:
      - run: echo "deploy-app code skipped"
      # Uncomment below to enable app deployment
      # - uses: actions/checkout@v2
      # - uses: azure/setup-kubectl@v1
      #   with:
      #     version: 'latest'
      # - uses: azure/k8s-set-context@v1
      #   with:
      #     kubeconfig: ${{ secrets.KUBECONFIG }}
      #     namespace: ${{ env.NAMESPACE }}
      # - uses: azure/setup-helm@v1
      #   with:
      #     version: v3.0.0
      # - run: |
      #     kubectl config current-context
      #     helm upgrade --install ${{ env.APPLICATION_NAME }} ./deploy/algorithms/. \
      #       --namespace ${{ env.NAMESPACE }} \
      #       --set image.repository=${{ env.IMAGE }} \
      #       --set image.tag=${{ env.TAG }} \
      #       --set appname=${{ env.APPLICATION_NAME }} \
      #       --set namespace=${{ env.NAMESPACE }}