name: CI/CD

on:
  push:
    branches:
      - master
env:
  APPLICATION_NAME: algorithms
  IMAGE: dsmercy/algorithms
  TAG: 1.0.${{ github.run_number }}
  DOCKERFILE_PATH: ""
  NAMESPACE: development

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install .NET 6 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Check directories
        run: |
          echo "Listing files in the root directory:"
          ls ./
      - name: Build the solution
        run: |
          echo "Building the solution..."
          dotnet build Algorithms.sln --configuration Debug

  test-and-coverage:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install .NET 6 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Restore NuGet packages
        run: |
          echo "Restoring NuGet packages..."
          dotnet restore Algorithms.sln

      - name: Install coverlet.collector
        run: |
          dotnet add Algorithms.Tests/Algorithms.Tests.csproj package coverlet.collector

      - name: Run unit tests and collect coverage
        run: |
          echo "Running unit tests and collecting coverage..."
          dotnet test Algorithms.Tests/Algorithms.Tests.csproj \
            --configuration Debug \
            --no-restore \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./Algorithms.Tests/TestResults \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: Algorithms.Tests/TestResults

  sonarcloud:
    runs-on: ubuntu-latest
    needs: test-and-coverage
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Disable shallow clone for better SonarCloud analysis

      - name: Install .NET 6 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Restore NuGet packages
        run: dotnet restore Algorithms.sln

      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: code-coverage
          path: ./Algorithms.Tests/TestResults

      - name: Install SonarScanner
        run: |
          mkdir -p .sonar/scanner
          dotnet tool install dotnet-sonarscanner --tool-path .sonar/scanner

      - name: Begin SonarCloud analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .sonar/scanner/dotnet-sonarscanner begin \
            /k:"dsmercy_Algorithms" \
            /o:"dsmercy" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths=Algorithms.Tests/TestResults/**/coverage.opencover.xml

      - name: Build the solution
        run: |
          dotnet build Algorithms.sln

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  push-docker-image:
    runs-on: ubuntu-latest
    needs: test-and-coverage
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./Algorithms/
          push: true
          tags: ${{ env.IMAGE }}:${{ env.TAG }}

  deploy-secrets:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Display message
        run: |
          echo "deploy-secrets code skipped"
      # Uncomment below to enable secrets deployment
      # - name: checkout code
      #   uses: actions/checkout@v2
      # - name: Set up Kubernetes cluster context
      #   uses: azure/k8s-set-context@v1
      #   with:
      #     kubeconfig: ${{ secrets.KUBECONFIG }}
      #     namespace: ${{ env.NAMESPACE }}
      # - name: Deploy secrets to Kubernetes
      #   run: |
      #     kubectl --namespace ${{ env.NAMESPACE }} create secret generic ${{ env.APPLICATION_NAME }}-secrets \
      #       --from-literal=my_connection_string=${{ secrets.MY_CONNECTION_STRING }} \
      #       --dry-run=client -o yaml | kubectl apply -f -

  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-secrets
    steps:
      - name: Display message
        run: |
          echo "deploy-app code skipped"
      # Uncomment below to enable app deployment
      # - name: checkout code
      #   uses: actions/checkout@v2
      # - name: Set up Kubectl
      #   uses: azure/setup-kubectl@v1
      #   with:
      #     version: 'latest'
      # - name: Set up Kubernetes cluster context
      #   uses: azure/k8s-set-context@v1
      #   with:
      #     kubeconfig: ${{ secrets.KUBECONFIG }}
      #     namespace: ${{ env.NAMESPACE }}
      # - name: Set up Helm
      #   uses: azure/setup-helm@v1
      #   with:
      #     version: v3.0.0
      # - name: Deploy to Kubernetes
      #   run: |
      #     kubectl config current-context
      #     helm upgrade --install ${{ env.APPLICATION_NAME }} ./deploy/algorithms/. \
      #       --namespace ${{ env.NAMESPACE }} \
      #       --set image.repository=${{ env.IMAGE }} \
      #       --set image.tag=${{ env.TAG }} \
      #       --set appname=${{ env.APPLICATION_NAME }} \
      #       --set namespace=${{ env.NAMESPACE }}